pipeline {
    agent {
        kubernetes {
            cloud 'kubernetes'
            yamlFile '.jenkins/build-pod.yml'
            defaultContainer 'python3'
        }
    }
    environment {
        BRANCH = "${env.BRANCH_NAME}"
        WORKSPACE = "${env.WORKSPACE}"
        RUNDECK_PRODUCTION_JOB_ID = "5cd60137-b97a-4831-a2b4-604821e7a3b8"
    }
    options {
        ansiColor('xterm')
        disableConcurrentBuilds(abortPrevious: true)
        skipDefaultCheckout false
    }
    stages {
        stage('Setup') {
            steps {
                cache(defaultBranch: 'master', caches: [
                    arbitraryFileCache(path: '../venv', cacheValidityDecidingFile: 'requirements/*.txt')
                ]) {
                    sh '''
                    apt-get update
                    apt-get install -y poppler-utils python3-psycopg2 postgis python3-pygraphviz graphviz graphviz-dev libgraphviz-dev libgdal-dev
                    python3 -m venv ../venv
                    . ../venv/bin/activate
                    pip install -r requirements/dev.txt
                    '''
                }
                container('postgres') {
                    sh '''
                    apk update
                    apk add git postgresql-dev make gcc musl-dev
                    git clone https://github.com/pgvector/pgvector.git
                    cd pgvector
                    make
                    make install
                    psql postgres --port=5432 --username postgres -c 'CREATE EXTENSION IF NOT EXISTS vector;'
                    '''
                }
            }
        }
        stage("Test & Lint & Safety") {
            parallel {
                stage("Test") {
                    steps {
                        bitbucketStatusNotify(buildState: 'INPROGRESS', buildKey: 'test', buildName: 'Tests')
                        script {
                            try {
                                sh '''
                                . ../venv/bin/activate
                                py.test --junitxml=test-reports/junit.xml --cov-report xml:test-reports/coverage.xml --cov=apps
                                '''
                                withChecks('Integration Tests') {
                                    junit 'test-reports/junit.xml'
                                }
                            } catch (Exception e) {
                                bitbucketStatusNotify(buildState: 'FAILED', buildKey: 'test', buildName: 'Tests')
                                withChecks('Integration Tests') {
                                  junit 'test-reports/junit.xml'
                                }
                                throw e
                            }
                        }
                        bitbucketStatusNotify(buildState: 'SUCCESSFUL', buildKey: 'test', buildName: 'Tests')
                    }
                }
                stage("Flake8") {
                    steps {
                        bitbucketStatusNotify(buildState: 'INPROGRESS', buildKey: 'flake8', buildName: 'Flake8')
                        script {
                            try {
                                sh '''
                                . ../venv/bin/activate
                                flake8
                                '''
                            } catch (Exception e) {
                                bitbucketStatusNotify(buildState: 'FAILED', buildKey: 'flake8', buildName: 'Flake8')
                                throw e
                            }
                        }
                        bitbucketStatusNotify(buildState: 'SUCCESSFUL', buildKey: 'flake8', buildName: 'Flake8')
                    }
                }
                stage("Isort") {
                    steps {
                        bitbucketStatusNotify(buildState: 'INPROGRESS', buildKey: 'isort', buildName: 'Isort')
                        script {
                            try {
                                sh '''
                                . ../venv/bin/activate
                                isort --check .
                                '''
                            } catch (Exception e) {
                                bitbucketStatusNotify(buildState: 'FAILED', buildKey: 'isort', buildName: 'Isort')
                                throw e
                            }
                        }
                        bitbucketStatusNotify(buildState: 'SUCCESSFUL', buildKey: 'isort', buildName: 'Isort')
                    }
                }
                stage("Black") {
                    steps {
                        bitbucketStatusNotify(buildState: 'INPROGRESS', buildKey: 'black', buildName: 'Black')
                        script {
                            try {
                                sh '''
                                . ../venv/bin/activate
                                 black --check .
                                '''
                            } catch (Exception e) {
                                bitbucketStatusNotify(buildState: 'FAILED', buildKey: 'black', buildName: 'Black')
                                throw e
                            }
                        }
                        bitbucketStatusNotify(buildState: 'SUCCESSFUL', buildKey: 'black', buildName: 'Black')
                    }
                }
                stage('SonarQube Analysis') {
                    steps {
                        container('jnlp') {
                            script {
                                def scannerHome = tool 'SonarQubeScanner';
                                withSonarQubeEnv() {
                                    sh "${scannerHome}/bin/sonar-scanner"
                                }
                            }
                        }
                    }
                }
                stage("Safety") {
                    steps {
                        bitbucketStatusNotify(buildState: 'INPROGRESS', buildKey: 'safety', buildName: 'Security-check')
                        script {
                            try {
                                sh '''
                                . ../venv/bin/activate
                                pip install -U pip
                                pip install safety
                                safety check -r requirements/base.txt -r requirements/dev.txt -r requirements/live.txt -r requirements/flower.txt
                                '''
                            } catch (Exception e) {
                                bitbucketStatusNotify(buildState: 'FAILED', buildKey: 'safety', buildName: 'Security-check')
                                throw e
                            }
                        }
                        bitbucketStatusNotify(buildState: 'SUCCESSFUL', buildKey: 'safety', buildName: 'Security-check')
                    }
                }
            }
        }
    }
    post {
        success {
            withCredentials([string(credentialsId: 'Rundeck', variable: 'RUNDECK_AUTH_TOKEN')]) {
                script {
                    if(BRANCH == "production") {
                        sh '''
                        curl \
                            -XPOST \
                            --header "X-Rundeck-Auth-Token: $RUNDECK_AUTH_TOKEN" \
                            --header "Content-Type: application/json" \
                            --data "{\"options\": {\"version\": \"$GIT_COMMIT\"}}" \
                            "https://ops.tsl.io/api/18/job/$RUNDECK_PRODUCTION_JOB_ID/executions"
                        '''
                    }
                }
            }
        }
        always {
            junit 'test-reports/junit.xml'
            cobertura coberturaReportFile: 'test-reports/coverage.xml', failUnhealthy: true, failUnstable: true, lineCoverageTargets: '80'
        }
    }
}
