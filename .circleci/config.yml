version: 2
jobs:
  test:
    docker:
      - image: silverlogic/python3.6
      - image: silverlogic/postgres9.6
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/dev.txt" }}
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y poppler-utils
            python3 -m venv ../venv
            . ../venv/bin/activate
            pip install -U pip
            pip install -r requirements/dev.txt
      - save_cache:
          key: v2-dependencies-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/dev.txt" }}
          paths:
            - ../venv
      - run:
          name: Run tests
          command: |
            . ../venv/bin/activate
            mkdir test-reports
            export SECRET_KEY=notsecret
            export DATABASE_URL='postgis://postgres:postgres@localhost/ci'
            export CELERY_BROKER_URL="N/A"
            export CELERY_RESULTS_URL="N/A"
            export URL="http://localhost"
            export FRONT_URL="http://app.localhost"
            export BRANCHIO_KEY="key_test_pmEf8Pqmg05t4N1MamZw4egeyxahRfTj"
            py.test --cov="apps" --junitxml=test-reports/junit.xml tests
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
      - run:
          name: Upload code coverage
          command: |
            . ../venv/bin/activate
            pip install codecov
            codecov --token="$CODECOV_TOKEN"

  lint:
    docker:
      - image: silverlogic/python3.6
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/dev.txt" }}
      - run:
          name: Install dependencies
          command: |
            python3 -m venv ../venv
            . ../venv/bin/activate
            pip install -U pip
            pip install -r requirements/dev.txt
      - save_cache:
          key: v2-dependencies-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/dev.txt" }}
          paths:
          - ../venv
      - run:
          name: Run flake8
          command: |
            . ../venv/bin/activate
            flake8
      - run:
          name: run isort
          command: |
            . ../venv/bin/activate
            isort --check
  deps-security-check:
    docker:
      - image: silverlogic/python3.6
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install safety
          command: |
            python3 -m venv ../venv
            . ../venv/bin/activate
            pip install -U pip
            pip install safety
      - run:
          name: run safety
          command: |
            . ../venv/bin/activate
            safety check -r requirements/base.txt -r requirements/dev.txt -r requirements/live.txt -r requirements/flower.txt
  apidocs:
    docker:
      - image: ruby:2.3
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "apidocs/Gemfile.lock" }}
      - run:
          name: Install dependencies
          command: |
            cd apidocs
            bundle install --path vendor/bundle
      - save_cache:
          key: v2-dependencies-{{ checksum "apidocs/Gemfile.lock" }}
          paths:
            - apidocs/vendor/bundle
      - run:
          name: Build api docs
          command: |
            cd apidocs
            bundle exec middleman build

  deploy:
    docker:
      - image: silverlogic/python3.6
    working_directory: ~/repo
    steps:
      - deploy:
          name: Deploy
          command: |
            if [ -z "${CIRCLE_TAG}" ]; then
              curl \
                -XPOST \
                --header "X-Rundeck-Auth-Token: $RUNDECK_AUTH_TOKEN" \
                --header "Content-Type: application/json" \
                --data "{\"options\": {\"version\": \"$CIRCLE_SHA1\"}}" \
                "https://ops.tsl.io/api/18/job/$RUNDECK_STAGING_JOB_ID/executions"
              curl \
                -XPOST \
                --header "X-Rundeck-Auth-Token: $RUNDECK_AUTH_TOKEN" \
                --header "Content-Type: application/json" \
                --data "{\"options\": {\"version\": \"$CIRCLE_SHA1\"}}" \
                "https://ops.tsl.io/api/18/job/$RUNDECK_STAGING_DOCS_JOB_ID/executions"
            else
              curl \
                -XPOST \
                --header "X-Rundeck-Auth-Token: $RUNDECK_AUTH_TOKEN" \
                --header "Content-Type: application/json" \
                --data "{\"options\": {\"version\": \"$CIRCLE_TAG\"}}" \
                "https://ops.tsl.io/api/18/job/$RUNDECK_PRODUCTION_JOB_ID/executions"
            fi

workflows:
  version: 2
  test-lint-apidocs-deploy:
    jobs:
      - test:
          filters:
            branches:
              ignore: production
            tags:
              only: /^v.*/
      - lint:
          filters:
            branches:
              ignore: production
            tags:
              only: /^v.*/
      - deps-security-check:
          filters:
            branches:
              ignore: production
            tags:
              only: /^v.*/
      - apidocs:
          filters:
            branches:
              ignore: production
            tags:
              only: /^v.*/
      - deploy:
          filters:
            branches:
              only:
                - master
            tags:
              only: /^v.*/
          requires:
            - test
            - lint
            - deps-security-check
            - apidocs
          context: org-global
  nightly-staging:
    triggers:
      - schedule:
          cron: "0 4 * * *"  # midnight est
          filters:
            branches:
              only: master
    jobs:
      - test
      - lint
      - deps-security-check
      - apidocs
      - deploy:
          requires:
            - test
            - lint
            - deps-security-check
            - apidocs
          context: org-global
  nightly-production:
    triggers:
      - schedule:
          cron: "0 4 * * *"  # midnight est
          filters:
            branches:
              only: production
    jobs:
      - test
      - lint
      - deps-security-check
      - apidocs
